import { Constructor, SyncEnhancedConstructor } from "./types";
/**
 * Given a class that implements `Iterable<T, TReturn, TNext>`, this returns a class that implements {@link IEnhancements}, allowing one to treat it as if
 * it were an array, in supporting methods such as {@link IEnhancements.map|.map()} and {@link IEnhancements.filter|.filter()}.
 *
 * Usage:
 *
 * ```typescript
 * class MySyncIterable implements Iterable<number> {
 *   *[Symbol.iterator]() {
 *      yield 1;
 *      yield 2;
 *      yield 3;
 *   }
 * }
 *
 * const MyEnhancedSyncIterable = SyncMixin(MySyncIterable);
 * type MyEnhancedSyncIterable = ConstructorType<typeof MyEnhancedSyncIterable>;
 * const foo = new MyEnhancedSyncIterable();
 * foo.map(i => i * 2).toArray(); => [2, 4, 6]
 * foo.map(i => i + 2).toArray(); => [3, 4, 5]
 * ```
 * @param Base a constructor for a class that implements `Iterable`.
 * @returns a new constructor for an enhanced class.
 */
export declare function SyncMixin<T, TReturn, TNext>(Base: Constructor<Iterable<T>>): new (...args: any[]) => SyncEnhancedConstructor<T, TReturn, TNext, typeof Base>;
//# sourceMappingURL=sync-mixin.d.ts.map