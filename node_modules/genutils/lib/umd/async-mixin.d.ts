import { AsyncEnhancedConstructor, Constructor } from "./types";
/**
 * Given a class that implements `Iterable<T, TReturn, TNext>`, this returns a class that implements {@link IEnhancements}, allowing one to treat it as if
 * it were an array, in supporting methods such as {@link IEnhancements.map|.map()} and {@link IEnhancements.filter|.filter()}.
 *
 * Usage:
 *
 * ```typescript
 * class MyAsyncIterable implements AsyncIterable<number> {
 *   async *[Symbol.Asynciterator]() {
 *      yield 1;
 *      yield 2;
 *      yield 3;
 *   }
 * }
 *
 * const MyEnhancedAsyncIterable = AsyncMixin(MyAsyncIterable);
 * type MyEnhancedAsyncIterable = ConstructorType<typeof MyEnhancedAsyncIterable>;
 * const foo = new MyEnhancedAsyncIterable();
 * await foo.map(i => i * 2).toArray(); => [2, 4, 6]
 * awaot foo.map(i => i + 2).toArray(); => [3, 4, 5]
 * ```
 * @param Base a constructor for a class that implements `AsyncIterable`.
 * @returns a new constructor for an enhanced class.
 */
export declare function AsyncMixin<T, TReturn, TNext>(Base: Constructor<AsyncIterable<T>>): new (...args: any[]) => AsyncEnhancedConstructor<T, TReturn, TNext, typeof Base>;
//# sourceMappingURL=async-mixin.d.ts.map