var t,e;t=this,e=function(t){const e=t=>"function"==typeof t,r=t=>t&&(u(t)||y(t)||f(t)),n=t=>t&&e(t.next)&&e(t.return)&&e(t.throw)&&e(t[Symbol.asyncIterator]);function i(t){if(n(t))return t;if(u(t)){const r=t;async function*e(){for(;;){const t=await r.next();if(t.done)return t.value;yield t.value}}return e()}if(y(t))return i(t[Symbol.asyncIterator]());if(f(t))return i(t[Symbol.iterator]());throw new Error(`Not iterable: ${t}`)}function a(t){if((r=t)&&e(r.next)&&e(r.return)&&e(r.throw)&&e(r[Symbol.iterator]))return t;var r;if(s(t))return t;if(f(t))return t[Symbol.iterator]();throw new Error(`Not iterable: ${t}`)}function o(t){if(n(t))return t;if(y(t))return t[Symbol.asyncIterator]();if(f(t))return l(a(t));throw new Error(`Not iterable: ${t}`)}const l=t=>{const e=t;let r;return r=async function*(){let n,i=!1;try{for(;;){const t=await Promise.resolve(e.next());if(t.done)return i=!0,t.value;try{n=yield t.value}catch(t){throw await(e.throw?.(t)),t}}}finally{i||await(t.return?.(r.returning))}}()};function c(t){return y(t)?t:f(t)?async function*(t){const e=t[Symbol.iterator]();let r;for(;;){const t=await e.next(r);if(t.done)return t.value;r=yield t.value}}(t):{[Symbol.asyncIterator]:()=>t}}const s=t=>t&&"function"==typeof t.next,u=t=>t&&"function"==typeof t.next,f=t=>t&&"function"==typeof t[Symbol.iterator],y=t=>t&&"function"==typeof t[Symbol.asyncIterator];class h{returning;[Symbol.toStringTag];asArray(){return this._impl.asArray(this)}limit(t){return this._impl.limit(t,this)}forEach(t,e){this._impl.forEach(t,e,this)}map(t,e){return this._impl.map(t,e,this)}filter(t,e){return this._impl.filter(t,e,this)}flat(t=1){return this._impl.flat(t,this)}flatMap(t,e=1){return this._impl.flatMap(t,e,this)}slice(t=0,e=Number.POSITIVE_INFINITY){return this._impl.slice(t,e,this)}concat(...t){return this._impl.concat(this,...t)}reduce(t,e){return this._impl.reduce(t,e,this)}some(t,e){return this._impl.some(t,e,this)}every(t,e){return this._impl.every(t,e,this)}repeatLast(t=Number.POSITIVE_INFINITY){return this._impl.repeatLast(this,t)}repeat(t,e=Number.POSITIVE_INFINITY){const r=this._impl.repeat(t,e);return this._impl.concat(this,r)}zip(...t){return this._impl.zip(this,...t)}join(t){return this._impl.join(this,t)}sort(t){return this._impl.sort(t)(this)}}const w=new class{of(...t){return this.enhance(t)}async asArray(t){const e=o(t),r=[];for(;;){const t=await e.next();if(t.done)return r;r.push(t.value)}}limit(t,e){let r;async function*n(e){let n,i=!1;try{for(let r=0;r<t;r++){const t=await e.next(n);if(t.done)return t.value;try{n=yield t.value}catch(t){await(e.throw?.(t))}}i=!0;const a=new RangeError(`Generator produced excessive values > ${t}.`);throw await(e.throw?.(a)),a}finally{i||await(e.return?.(r?.returning))}}return e?r=this.enhance(n(o(e))):t=>this.enhance(n(o(t)))}forEach(t,e,n){const i=async(t,e,r)=>{const n=o(r);let i=0;for(;;){const r=await n.next();if(r.done)return;await t.call(e,r.value,i++)}};return n?i(t,e,n):r(e)?i(t,void 0,e):(r,n)=>i(t,n??e,r)}map(t,e,n){const a=(e,r)=>{const n=i(r);let a;return a=this.enhance(async function*(){let r,i=0;for(;;)for(;;)try{for(;;){const a=await n.next(r);if(a.done)return a.value;const o=await t.call(e,await a.value,i++);try{r=yield o}catch(t){await n.throw(t)}}}finally{if(!(await n.return(a?.returning)).done)break}}())};return n?a(e,n):r(e)?a(void 0,e):(t,r)=>a(r??e,t)}filter(t,e,n){const a=(e,r)=>{const n=i(r);let a;return a=this.enhance(async function*(t){let r,i=0;for(;;)for(;;)try{for(;;){const a=await n.next(r);if(a.done)return a.value;if(await t.call(e,a.value,i++))try{r=yield a.value}catch(t){await n.throw(t)}}}finally{if(!(await(n.return?.(a?.returning)))?.done)break}}(t))};return n?a(e,n):r(e)?a(void 0,e):(t,r)=>a(r??e,t)}flat(t,e){const i=(t,e)=>{let r;const i=new Set;return n(e)&&i.add(e),r=this.enhance(async function*t(e,a){let l;for(;;)for(;;)try{for(;;){const r=await e.next(l);if(r.done)return r.value;const c=r.value;n(c)&&i.add(c);try{a>0&&u(c)?yield*t(c,a-1):a>0&&(y(c)||f(c))?yield*t(o(c),a-1):l=yield r.value}catch(t){await(e.throw?.(t))}}}finally{const t=await(e.return?.(r?.returning));if(n(e)&&i.delete(e),t&&!t.done)break;for(const t of i)await t.return(r?.returning)}}(o(e),t))};if("number"==typeof t){if(e){if(r(e))return i(t,e);throw new TypeError(`Invalid Genable: ${e}`)}return e=>i(t,e)}if(r(t))return i(e??1,t);throw new TypeError("Illegal arguments to flat()")}flatMap(t,e,n){const a=(e,r)=>{let n,a=0;return n=this.enhance(async function*e(r,l){let c;for(;;)for(;;)try{for(;;){const n=await r.next(c);if(n.done)return n.value;const s=await t(n.value,a++);try{if(u(s))if(l>1)yield*e(s,l-1);else if(1===l){const t=o(s);yield*i(t)}else yield s;else y(s)||f(s)?l>1?yield*e(o(s),l-1):1===l?yield*i(s):yield s:c=yield s}catch(t){await(r.throw?.(t))}}}finally{const t=await(r.return?.(n?.returning));if(t&&!t.done)break}}(o(r),e))};return r(n)?a(e??1,n):r(e)?a(1,e):(t,r)=>a(e??r??1,t)}slice(t,e,r){const n=r=>{const n=o(r);return this.enhance(async function*(t,e){for(let e=0;e<t;e++){const t=await n.next();if(t.done)return t.value}if(e===Number.POSITIVE_INFINITY)yield*c(n);else{let r;for(;;)try{for(let i=t;i<e;i++){const t=await n.next(r);if(t.done)return t.value;try{r=yield t.value}catch(t){const e=await(n.throw?.(t));if(e){if(e.done)return e.value;r=yield e.value}}}}finally{const t=await(n.return?.());if(t&&!t.done)break}}}(t,e))};return r?n(r):n}concat(...t){let e;return e=this.enhance(async function*(){let r=0;try{for(;r<t.length;r++){const e=c(t[r]);yield*e}}finally{for(;r<t.length;r++){const i=t[r];n(i)&&await i.return(e?.returning)}}}())}reduce(t,e,n){const i=async(e,r)=>{let n=await e;if(void 0===n){const t=await r.next();if(t.done)throw new TypeError("No initial value in reduce");n=t.value}for(;;){const e=await r.next();if(e.done)return n;n=await t(n,e.value)}};return r(n)?i(e,o(n)):r(e)?i(void 0,o(e)):(t,r)=>i(r??e,o(t))}some(t,e,n){const i=async(e,r)=>{let n=0;for(;;){const i=await r.next();if(i.done)return!1;if(t.call(e,i.value,n++))return!0}};if(r(n))return i(e,o(n));if(r(n))return(t,r)=>i(r??e,o(t));throw new Error(`Invalid argument to some: ${n??e}`)}every(t,e,n){const i=async(e,r)=>{let n=0;for(;;){const i=await r.next();if(i.done)return!0;if(!t.call(e,i.value,n++))return!1}};if(r(n))return i(e,o(n));if((a=n)&&(s(a)||f(a)))return(t,r)=>i(r??e,o(t));var a;throw new Error(`Invalid argument to every: ${n??e}`)}repeatLast(t,e=Number.POSITIVE_INFINITY){const r=o(t);let n,i;return i=this.enhance(async function*(){try{let t;for(;;){const e=await r.next(n);if(e.done)break;try{n=yield t=e.value}catch(e){const n=await(r.throw?.(e));if(n){if(n.done)break;yield t=n.value}}}for(let r=0;r<e;r++)yield await t}finally{await(r.return?.(i?.returning))}}())}repeat(t,e=Number.POSITIVE_INFINITY){return this.enhance(async function*(){for(let r=0;r<e;r++)yield await t}())}zip(...t){if(0===t.length)return this.enhance([]);const e=t.map(o);let r,n=!1;return r=this.enhance(async function*(){try{for(;;){let r=[];for(const t of e){const e=await t.next();if(e.done)return n=!0,e.value;r.push(e.value)}try{yield r}catch(e){for(const r of t)try{await(r.throw?.(e))}catch{}throw e}}}finally{if(!n)for(const e of t)try{await(e.return?.(r?.returning))}catch{}}}())}join(t,e){return"string"==typeof t?(e=t,t=>this.join(t,e)):Promise.resolve(this.enhance(t).asArray()).then((t=>t.join(e)))}merge(...t){let e,r;const n=new Promise((t=>r=t));let i,a=t.length;const l=new Promise((()=>null));let c=[];return i=[...t.map((async(t,e)=>{const n=o(t);c[e]=n;const s=async t=>()=>{if(t.done)return i[e]=l,--a>0?null:(r(t),t);{const r=n.next().then(s);return i[e]=r,t}};return await n.next().then(s)})),n],e=w.enhance(async function*(){try{let r;for(;a;){const t=[];i.forEach((e=>t.push(e)));const e=await await Promise.race(t);if("function"==typeof e){let t=e();if(t){if(t.done)return t.value;r=yield t.value}}else if(e&&e.done)return e.value}}finally{if(a)for(let r=0;r<t.length;r++)(null===i[r]?null:c[r])?.return?.(e?.returning)}}())}sort(t){return async(...e)=>(await this.merge(...e).asArray()).sort(t)}enhance(t){const e=i(t),r=Object.getPrototypeOf(e),n=Object.assign(Object.create(d.prototype),r);return n.return=t=>(e.returning=t,r.return.call(e,t)),n[Symbol.asyncIterator]=()=>e,Object.setPrototypeOf(e,n),e}};class d extends h{}const p=Object.getPrototypeOf(async function*(){}());Object.setPrototypeOf(d.prototype,(t=>{const e=Object.create(t);return(t=>{for(const r of Reflect.ownKeys(t))"constructor"!==r&&(e[r]=t[r])})(h.prototype),e})(p)),Object.defineProperty(d.prototype,"_impl",{value:w,writable:!1,enumerable:!1,configurable:!1}),t.Async=w,t.AsyncGenProto=p,t.EnhancedAsyncGenerator=d,Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).async={});
//# sourceMappingURL=async.js.map
