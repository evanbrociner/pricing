class t extends Promise{#fn;#delay;#accept;#reject;#result;#error;static[Symbol.toStringTag]="Future";static[Symbol.species]=Promise;constructor(t,e){let r,s;super(((t,e)=>{r=t,s=e})),this.#accept=r,this.#reject=s,this.#fn=t,this.#delay=!!e}eval(t,e){if(!this.#fn){if(this.#error)throw this.#error;return this.#result}try{return this.#result=this.#fn(),this.#accept?.(this.#result),this.#result}catch(t){throw this.#error=t,this.#reject?.(t),t}finally{this.#fn=void 0,this.#accept=void 0,this.#reject=void 0,(t||e)&&super.then(t,e)}}then(t,e){if(this.#fn&&!this.#delay&&(t||e))try{this.eval()}catch(t){}return t||e?super.then(t,e):this}}export{t as Future};
//# sourceMappingURL=future.js.map
