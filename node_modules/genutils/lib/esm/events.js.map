{"version":3,"file":"events.js","sources":["../../node_modules/denque/index.js","../../src/events.ts"],"sourcesContent":["'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n\n  this._head = 0;\n  this._tail = 0;\n  this._capacity = options.capacity;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","/*\n * Copyright 2021 by Bob Kerns. Licensed under MIT license.\n *\n * Github: https://github.com/BobKerns/genutils\n */\n/**\n * Turn events/imperative calls into values returned by an async generator.\n * @module events\n * @packageDocumentation\n * @preferred\n */\n\nimport Denque from 'denque';\n\n/**\n * Interface for controlling the generators returned by {@link eventToGenerator}.\n */\nexport interface Controller<T, E = T | any> {\n    /**\n     * Queue _v_ to the generator.\n     * @param v\n     */\n    send(v: T): void,\n\n    /**\n     * Queue _e_ (optional) to be returned by the generator, ending it.\n     * @param e\n     */\n    end(e?: E): void,\n\n    /**\n     * Queue an error to be thrown by the generator, ending it.\n     * @param err\n     */\n    throw(err: Error): void;\n\n    /**\n     * Clear all pending values queued to the generator.\n     */\n    clear(): void;\n}\n\nconst endTag = Symbol.for(\"endTag\");\nconst returnMsg = {[endTag]: 'return'};\nconst throwMsg = {[endTag]: 'throw'};\ntype ReturnMsg<R> = typeof returnMsg & {value: R};\ntype ThrowMsg = typeof throwMsg & {value: Error};\ntype EndMsg<R> = ReturnMsg<R> | ThrowMsg;\nconst isReturnMsg = <R>(m: any): m is ReturnMsg<R> => m instanceof Object && (m[endTag] === 'return');\nconst isThrowMsg = (m: any): m is ThrowMsg => m instanceof Object && (m[endTag] === 'throw');\n\n/**\n * A queue usable by {@link eventToGenerator}.\n */\nexport interface Queue<T extends any> {\n    length: number;\n    push(value: T): number;\n    shift(): T | undefined;\n    clear(): void;\n}\n\n/**\n * A factory function that returns a {@link Queue}. It will be called with no arguments.\n */\nexport type QueueFactory<T> = () => Queue<T>;\n\n/**\n * async generator function `eventToGenerator`(_queue_) returns _[generator, controller]_\n *\n * Create a generator that can be made to return values to be supplied by a callback.\n * * _queue_: A {@link QueueFactory} function that returns the {@link Queue} to use.\n * * _generator_: The generator being controlled.\n * * _controller_: A {@link Controller} object with the following:\n * >   * `send(`_value_`)`: send the next value to generate.\n * >   * `end()`: Cause the generator to end\n * >   * `throw(`_error_`)`: Cause the generator to throw an exception.\n * >   * `clear()`: Remove any pending queue items.\n *\n * `end` and `throw` are synchronous with the queue. That is, they cause the queue to end or throw\n * when the consumer of the generator has read everything prior in the queue.\n *\n * _queue_ should return a {@link Queue} object that implements `.length`, `.push()`, `.shift()`, and `.clear()`.\n * The default implementation is [Denque](https://github.com/invertase/denque), which is fast for unbounded size.\n *\n * The returned generator may be enhanced with {@link Async_.enhance|Async.enhance} if desired.\n *\n * Other {@link QueueFactory} functions provided:\n * * {@link queue1}: returns a \"queue\" of maximum length 1. Older entries are discarded.\n * * {@link queueSticky}`: Returns a queue that returns the last value seen, forever (or until cleared).\n * * {@link queueOldest}_(n)_: Call with _n_ to set the size; when full new values are discarded.\n * * {@link queueNewest}_(n)_: Call with _n_ to set the size; when full old values are discarded.\n * * {@link queueUnique}: Returns a queue that discards duplicate enqueued values.\n * @returns [AsyncGenerator, {@link Controller}]\n */\nexport const eventToGenerator = <T, R = void>(queue: QueueFactory<T | EndMsg<R>> = () => new Denque()): [AsyncGenerator<T, R>, Controller<T>] => {\n    let unblock: (v?: any) => void = () => undefined;\n    let waiter = null;\n    const q = queue();\n    const send = (v?: any) => (q.push(v), unblock());\n    class EventController implements Controller<T> {\n        send(v?: T) {\n            return send(v);\n        }\n        end(value?: T) {\n           return send({[endTag]: 'return', value})\n        }\n        throw(value: Error) {\n            return send({ [endTag]: 'throw', value });\n        }\n        clear() { return q.clear(); }\n    }\n    async function* eventToGenerator(): AsyncGenerator<T, R> {\n        while (true) {\n            while (!q.length) {\n                waiter = new Promise(a => (unblock = a));\n                await waiter;\n                waiter = null;\n                unblock = () => undefined;\n            }\n            const v = q.shift();\n            if (isReturnMsg<R>(v)) return v.value;\n            if (isThrowMsg(v)) {\n                throw v.value;\n            }\n            yield v as T;\n        }\n    }\n    return [\n        eventToGenerator(),\n        new EventController()\n    ];\n}\n\n/**\n * A {@link QueueFactory} that returns a {@link Queue} of maximum length 1, which discards older values.\n */\nexport const queue1 = <V>(): Queue<V> => {\n    let value: V | undefined,\n        empty = true;\n    class Queue1 implements Queue<V> {\n        get length() { return empty ? 0 : 1}\n        push(v: V) {\n            empty = false;\n            value = v;\n            return 1;\n        }\n        shift() {\n            empty = true;\n            const tmp = value;\n            value = undefined;\n            return tmp;\n        }\n        clear() {\n            empty = true;\n            value = undefined;\n        }\n    }\n    return new Queue1();\n};\n\n/**\n * A {@link QueueFactory} that returns a {@link Queue} of maximum length 1, which discards older\n * values, but returns the last seen forever (until cleared).\n */\nexport const queueSticky = <V>(): Queue<V> => {\n    let value: V | undefined,\n        empty = true;\n    class QueueSticky implements Queue<V> {\n        get length() { return empty ? 0 : 1}\n        push(v: V) {\n            empty = false;\n            value = v;\n            return 1;\n        }\n        shift() {\n            return value;\n        }\n        clear() {\n            empty = true;\n            value = undefined;\n        }\n    }\n    return new QueueSticky();\n}\n\n/**\n * Make a {@link QueueFactory} that returns a {@link Queue} of maximum length _n_,\n * which discards newer values.\n * @param n the number of entries, default = `1`.\n */\nexport const queueOldest = <V>(n: number = 1): QueueFactory<V> => {\n    return (): Queue<V> => {\n        const queue = new Denque();\n        class QueueOldest implements Queue<V> {\n            get length() { return queue.length};\n            push(v: V) {\n                if (queue.length < n) {\n                    return queue.push(v);\n                }\n                // Otherwise, we let it drop.\n                return queue.length;\n            }\n            shift() { return queue.shift(); }\n            clear() { return queue.clear(); }\n        }\n        return new QueueOldest();\n    };\n};\n\n/**\n * Make a {@link QueueFactory} that returns a {@link Queue} of maximum length _n_, which discards older values.\n * @param n the number of entries, default = `1`.\n */\nexport const queueNewest = <V>(n: number = 1): QueueFactory<V> => {\n    return (): Queue<V> => {\n        const queue = new Denque();\n        class QueueNewest implements Queue<V> {\n            get length() { return queue.length; }\n            push(v: V) {\n                while (queue.length >= n) {\n                    queue.shift();\n                }\n                return queue.push(v);\n            }\n            shift() {\n                return queue.shift();\n            }\n            clear() {\n                return queue.clear();\n            }\n        }\n        return new QueueNewest();\n    };\n};\n\nexport type KeyFn = (k: any) => any;\nexport interface QueueUniqueSpec {\n    newest?: boolean;\n    keyFn?: KeyFn;\n}\n/**\n * function queueUnique({newest, keyFn}): () =>\n *\n * Return a {@link QueueFactory}, which supplies {@link Queue} instances that discard\n * already-enqueued entries. Values can be re-enqueued once delivered.\n * * _newest_: if `false` (the default), values are dequeued in the order they were first enqueued. Using `{newest: true}` deprioritizes more active values so less-busy items can get through. But in a sustained-busy situation, there is no guarantee they will ever be delivered. This can be an advantage or disadvantage, depending on requirements.\n * * _keyFn_: A function to identify what values count as \"equal\". The default regards +0 and -0 as the same, NaN's as all the same, and otherwise behaves as `===`.\n * @param spec a {@link QueueUniqueSpec}\n */\nexport const queueUnique = <E>(spec?: QueueUniqueSpec): QueueFactory<E> => {\n    const fn = (newest: boolean, keyFn: KeyFn) => (): Queue<E> => {\n        const queue = new Map();\n        let iter: null | Iterator<E> = null;\n        class QueueUnique implements Queue<E> {\n            get length() { return queue.size; }\n            push(v: any) {\n                const k = keyFn(v);\n                if (newest) {\n                    // As I read the spec, this should not be needed, but experimentally\n                    // in Chrome, it is.\n                    queue.delete(k);\n                    queue.set(k, v);\n                } else if (!queue.has(k)) {\n                    queue.set(k, v);\n                }\n                return queue.size;\n            }\n            shift() {\n                if (!iter) {\n                    iter = queue.values();\n                }\n                const r = iter.next();\n                if (r.done) {\n                    // If values had been added later, they would turn up\n                    // in the iterator, so we're done.\n                    iter = null;\n                    return undefined;\n                }\n                return r.value;\n            }\n            clear() {\n                return queue.clear();\n            }\n        }\n        return new QueueUnique();\n    };\n    if (spec === undefined) {\n        // Called without specifying a length, just return a size=1 queue.\n        return fn(false, i => i);\n    }\n    // Return a function to construct queues of the specified size.\n    return fn(!!spec.newest, spec.keyFn || (i => i));\n};\n\n/**\n * Accepts objects, and returns just the fields that have changed (are no longer `===`).\n *\n * This does not distinguish between deleted keys and keys assigned a value of `undefined` in the input.\n * In the output, a deleted key is represented as present with a value of `undefined`.\n *\n * @param init The initial value\n */\nexport const queueUpdateShallow = <E extends object>(init: Partial<E> = {}) => (): Queue<Partial<E>> => {\n    const state: Partial<E> = { ...init };\n    let pending: Partial<E> = {};\n    let hasPending = false;\n    class QueueUpdateShallow implements Queue<Partial<E>> {\n        get length() { return (hasPending ? 1 : 0); }\n        push(v: E) {\n            const check = (k: Partial<E>) => (Object.keys(k) as (keyof E)[]).forEach(k => {\n                if (state[k] !== v[k]) {\n                    pending[k] = v[k];\n                    hasPending = true;\n                }\n            });\n            check(state);\n            check(v);\n            return 1;\n        }\n        shift() {\n            try {\n                return pending;\n            } finally {\n                Object.assign(state, pending);\n                this.clear();\n            }\n        }\n        clear() {\n            pending = {};\n            hasPending = false;\n        }\n    }\n    return new QueueUpdateShallow();\n};\n"],"names":["Denque","array","options","this","_head","_tail","_capacity","capacity","_capacityMask","_list","Array","isArray","_fromArray","prototype","peekAt","index","i","len","size","get","peek","peekFront","peekBack","Object","defineProperty","unshift","item","undefined","length","_growArray","pop","shift","head","_shrinkArray","push","tail","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","arguments","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","fullCopy","newArray","list","denque","endTag","Symbol","for","isThrowMsg","m","eventToGenerator","queue","unblock","waiter","q","send","v","async","Promise","a","value","end","throw","queue1","empty","tmp","queueSticky","queueOldest","n","queueNewest","queueUnique","spec","fn","newest","keyFn","Map","iter","delete","set","has","values","r","next","done","queueUpdateShallow","init","state","pending","hasPending","check","keys","forEach","assign"],"mappings":"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"}